<?php
/*
 * Created on 29 Oct, 2011
 *
 * To change the template for this generated file go to
 * Window - Preferences - PHPeclipse - PHP - Code Templates
 */
 
define('ACTIVITY_BLOG_TERM_PREFIX', 'activity_blog_term_');
define('ACTIVITY_BLOG_VOCABULARY_MACHINENAME', 'activity_blog');

function activity_init(){
    Glools_Inc_Tools::loadInc('funcs', 'lib', 'activity');
    Glools_Inc_Tools::loadInc('activity', 'lib', 'activity');
    Glools_Inc_Tools::loadInc('statistics', 'lib', 'activity');
}

function activity_permission() {
	return array(
        'book activity' => array(
            'title' => t('Book activity'),
            'description' => t('Book activity and pay to lasooo')
        ),
        'post activity attached content' => array(
            'title' => t('Post attached content for activity'),
            'description' => t('Post attached content for activity, etc comment, blog, topic.')
        ),
        'create activity' => array(
            'title' => t('Create activity'),
            'description' => t('Create a activity.')
        )
    );
}



function activity_menu(){
    return array(
        // Activity major page
        'activity/create' => array(
        'title' => t('Create Activity'),
        'type' => MENU_CALLBACK,
        'page callback' => 'activity_create',
        'access arguments' => array('create activity'),
        'access callback' => 'member_access',
        'file' => 'activity-create.page.inc'
            ),
        'activity/%/edit' => array(
            'title' => t('Edit Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_edit',
            'page arguments' => array(1),
            'access arguments' => array('edit own activity content'),
            'file' => 'activity-edit.page.inc'
        ),
        'activity/%/book' => array(
            'title' => t('Book Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_book',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('access content'),
            'file' => 'activity-book.page.inc'
        ),
        'activity/%/debook' => array(
            'title' => t('Book Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_debook',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('access content'),
            'file' => 'activity-book.page.inc'
        ),
        'activity/%/lock' => array(
            'title' => t('Book Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_lock',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('access content'),
            'file' => 'activity.page.inc'
        ),
        'activity/%/favorite' => array(
            'title' => t('Book Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_favorite',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('access content'),
            'file' => 'activity.page.inc'
        ),
        'activity/%/unlock' => array(
            'title' => t('Book Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_unlock',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('access content'),
            'file' => 'activity.page.inc'
        ),
        // -- forum menu define --
        'activity/%/forum' => array(
            'title' => t('Activity Forum'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_forum',
            'page arguments' => array(1),
            'access arguments' => array('access content'),
            'file' => 'activity-forum.page.inc'
        ),
        'activity/%/blogs' => array(
            'title' => t('Activity Blogs'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_blogs',
            'page arguments' => array(1),
            'access arguments' => array('access content'),
            'file' => 'activity-blogs.page.inc'
        ),
        'activity/%/blogs/%' => array(
            'title' => t('Activity Blogs'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_blog',
            'page arguments' => array(1,3),
            'access arguments' => array('access content'),
            'file' => 'activity-blog.page.inc'
        ),
        'activity/%/reviews' => array(
            'title' => t('Activity Reviews'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_reviews',
            'page arguments' => array(1),
            'access arguments' => array('access content'),
            'file' => 'activity-reviews.page.inc'
        ),
        'activity/%/blogs/post' => array(
            'title' => t('Post New Activity Blog'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_blog_post',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('post activity attached content'),
            'file' => 'activity-blog.page.inc'
        ),
        'activity/%/forum/post-topic' => array(
            'title' => t('Activity Forum'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_forum_posttopic',
            'page arguments' => array(1),
            'access callback' => 'member_access',
            'access arguments' => array('post activity attached content'),
            'file' => 'activity-forum-posttopic.page.inc'
        ),
        'activity/%/forum/topic/%' => array(
            'title' => t('Activity Forum'),
            'type' => MENU_CALLBACK,
            'page callback' => 'activity_forum_topic',
            'page arguments' => array(1, 4),
            'access arguments' => array('access content'),
            'file' => 'activity-forum-topic.page.inc'
        ),
                'activity/search'    => array(
                        'title' => t('Search Activity'),
                        'type' => MENU_CALLBACK,
                        'page callback' => 'activity_search',
                        'access arguments' => array('access content'),
            'file' => 'activity-search.page.inc'
                ),
        'home/activity' => array(
            'title' => t('My Activity'),
            'type' => MENU_CALLBACK,
            'page callback' => 'home_activity',
            'access arguments' => array('access content'),
            'file' => 'activity-home.page.inc'
        )
    );
}

function activity_homeTabs(){
	if (preg_match('/^home\/activity\/([a-z]+)/', request_path(), $matched)) {
        $tab = $matched[1];
    }else{
        $tab = 'created';
    }
    
    $mtabs = array(
        '#type' => 'ul',
        'cAttributes' => array(),
        'items' => array(
            //array('data'=>l('All', 'home/activities'), 'attributes'=>array('id'=>'tabs-all', 'class'=>array('tabs-all'))),
            array('data'=>l('Created', 'home/activity/created'), 'attributes'=>array('id'=>'mbox-tabs-created', 'class'=>array('tabs-created'))),
            array('data'=>l('Participent', 'home/activity/participent'), 'attributes'=>array('id'=>'mbox-tabs-participent', 'class'=>array('tabs-participent'))),
            array('data'=>l('Favorite', 'home/activity/favorite'), 'attributes'=>array('id'=>'mbox-tabs-favorite', 'class'=>array('tabs-favorite'))),
            //array('data'=>l('Marked star', 'home/activities/marked'), 'attributes'=>array('id'=>'mbox-tabs-marked', 'class'=>array('tabs-marked'))),
            //array('data'=>l('Expired', 'home/activities/expired'), 'attributes'=>array('id'=>'mbox-tabs-expired', 'class'=>array('tabs-expired'))),
            //array('data'=>l('Failed', 'home/activities/failed'), 'attributes'=>array('id'=>'mbox-tabs-failed', 'class'=>array('tabs-failed'))),
        )
    );
    
    $tabClass = 'tabs-' . $tab ;
    foreach($mtabs['items'] as $k=>$v) {
        if (in_array($tabClass, $v['attributes']['class'])) {
            $v['attributes']['class'][] = 'active';
            $mtabs['items'][$k] = $v;
            break;
        }
    }
    
    return theme('glools_item_list', $mtabs);
}

function activity_node_view_alter(&$build, $type){
	//debug_record_data('activity.module:activity_node_view', $build['#node']);
    
    $func = 'activity_'.$build['#node']->type.'_node_view_alter';
    
    Glools_Inc_Tools::loadInc('node-view-alter', 'lib', 'activity');
    if (function_exists($func)) {
    	$func($build, $type);
    }
}

function activity_form_alter(&$form, &$form_state, $form_id){
    
    Glools_Inc_Tools::loadInc('activity_'.$form_id, 'form', 'activity');
    
    $func = 'activity_'.$form_id.'_alter';
    
    if (function_exists($func)) {
        $func($form, $form_state, $form_id);
    }
}

function activity_ajax_render($form, $form_state){
    global $user;
    $commands = array();
    
    $contact = db_query('select * from {users_contact} where uid=:uid', array(':uid'=>$user->uid))->fetchAllAssoc('uid');
    
    $commands[] = ajax_command_remove('#activity-participating-agreement input#edit-agree');
    $commands[] = ajax_command_append('#activity-participating-agreement', '<div class="messages status">'.t('Thanks for you agreed the Activity Participating Agreement').'</div>');
    $commands[] = ajax_command_append('#activity-participating-agreement', Glools_Inc_Tools::renderTpl(array('contact'=>$contact[$user->uid]), 'participating-activity-notice', 'activity'));
    
    return array(
        '#type' => 'ajax',
        '#commands' => $commands
    );
}

function activity_loadOperations($node){
    global $user;
    
    $section = '';
    
    $os = activity_DefaultOperations($node);
    
    if ($user->uid==$node->uid) {
    	$section .= 'management';
    }
    
    $rQ = db_query('select * from {activity_participant} where user_id=:uid and instance_id=:aid', array(':uid'=>$user->uid, ':aid'=>$node->nid));
    if ($rQ->rowCount()>0) {
        $section .= empty($section) ? 'participating' : '+participating';
    }
    
    $rQ = db_query('select * from {flag_content} as c right join {flags} as f on (f.name=\'like\') where c.uid=:uid and c.content_id=:cid', array(':uid'=>$user->uid, 'cid'=>$node->nid));
    
    if ($rQ->rowCount()>0) {
        
        $section .= empty($section) ? 'favorite' : '+favorite';
    }
    $links = array();
    foreach($os as $o=>$l) {
        if (false===strpos($section, $o)) {
    		continue;
    	}
        $links = array_merge($links, $os[$o]);
    }
    
    drupal_alter('activity_operations', $links, $section);
    
    drupal_add_js(path_to_theme() . '/js/components/activity-operations.js');
    
    return $links;
}

function activity_DefaultOperations($node){
    global $user;
    
    $lock = $node->status ? 'lock' : 'unlock';
    
	return array(
        'management' => array(
            l(t('Edit'), 'activity/' . $node->nid . '/edit'),
            l(t(ucfirst($lock)), 'activity/' . $node->nid . '/' . $lock, array('attributes'=>array('class'=>array('ajax-invoke')))),
        ),
        'favorite'   => array(
            l(t('Favorite') . '<span>('. t('cancel') . ')</span>', 'activity/' . $node->nid . '/favorite', array('html'=>'true', 'attributes'=>array('class'=>array('ajax-invoke'))))
        ),
        'participating'=> array(
            //l(t('Remark'), 'activity/' . $node->nid . '/remark')
        )
    );
}

function activity_form_validate($form, &$form_state){
	Glools_Inc_Tools::loadInc('activity_' . $form['#form_id'], 'form', 'activity');
    
    $func = 'activity_' . $form['#form_id'] . '_validate';
    
    if (function_exists($func)) {
        $func($form, $form_state);
    }
}

function activity_form_submit(&$form, &$form_state){
    
    
    Glools_Inc_Tools::loadInc('activity_' . $form['#form_id'], 'form', 'activity');
    
    $func = 'activity_' . $form['#form_id'] . '_submit';
    
    if (function_exists($func)) {
        $func($form, $form_state);
    }
}

function activity_forms($form_id, $args){
	return array(
        'activity-participating-form' => array('callback' => 'activity_participating_form')
    );
}

function activity_theme($existing, $type, $theme, $path){
	return array(
        'activity_form'  => array(
            'render element' => 'element',
        ),
		'searchActivity' => array(
			'variables'=> array('activities' => NULL)
		),
        'activity_forum_pageheader' => array(
            'variables' => array('header'=>null, 'activity'=>null),
            'template' => 'activity_forum_pageheader'
        ),
        'activity_forum_topics' => array(
            'variables' => array('topics'=>null, 'forum'=>null, 'activity'=>null, 'pager'=>null),
            'template' => 'activity_forum_topics'
        ),
        'activity_forum_topic' => array(
            'variables' => array('topic'=>null, 'activity'=>null),
            'template' => 'activity_forum_topic'
        ),
        'activity_blogs' => array(
            'variables' => array('blogs'=>null, 'terms'=>null, 'activity_id'=>null),
            'template' => 'activity_blogs'
        ),
        'activity_home'  => array(
            'variables' => array('tabs'=>null, 'nodes'=>null, 'state'=>null),
            'template'  => 'activity_home'
        )
	);
}

function theme_activity_form($variables) {
  $element = $variables['element'];
  
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = drupal_strip_dangerous_protocols($element['#action']);
  }
  element_set_attributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  
  return theme_render_template(drupal_get_path('module', 'activity') . '/inc_templates/activity-form.tpl.inc', array('element'=>$element));
  
  // Anonymous DIV to satisfy XHTML compliance.
  //return '<form' . drupal_attributes($element['#attributes']) . '><div>' . $element['#children'] . '</div></form>';
}

function activity_page_build(&$vars){
    
    Glools_Inc_Tools::loadInc('funcs', 'lib', 'activity');
    
    //if (preg_match('/^node\/[0-9]+/', request_path())||preg_match('/^activity\/[0-9]+/', request_path())) {
    if (preg_match('/^(node|activity|blogs)\/[0-9]+/', request_path())) {    
        $paths = explode('/', request_path());
    	$node = node_load($paths[1]);
        
        if (false==$node || !in_array($node->type, array('activity', 'blog'))) {
        	return null;
        }
        
        if ('activity'==$node->type && 'activity/'.$node->nid==request_path()) {
            drupal_add_js(path_to_theme().'/js/activity.page.js');
            drupal_add_js(path_to_theme().'/js/tabScroller.js');
        }
        
        if ('blog'==$node->type && empty($node->field_activity_term)) {
        	return null;
        }elseif ('blog'==$node->type) {
        	$term = $node->field_activity_term[$node->language][0]['taxonomy_term'];
        	$termArgs = explode('_', $term->name);
        	$blog = node_load($termArgs[3]);
        }
        
        $options = array(
            'global' => array(
                'node' => empty($blog)?$node:$blog
            )
        );
        
        //glools_load_views($node->type.'-node', $vars, $options, 'activity');
    }
}
